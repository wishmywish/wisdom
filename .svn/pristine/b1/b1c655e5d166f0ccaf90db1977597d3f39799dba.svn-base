<?php
/**
 * 部门的	增删查改
 * 员工的	增删查改
 * @author Administrator
 */
namespace Admin\Controller;
use Think\Controller;
class GroupController extends Controller {
	static public $treeList = array();
	
    function index(){
        //获取部门列表
        $companyId=cookie("companyId");
        $companyName=cookie("companyName");
        $deptListArr_tree = $this->getDept();       
        
        //分页
        $page = I('page');
        if( $page == '' ){
        	$page = 0;
        }
        
        $pageSize = 5;
        $page_start = $page*$pageSize;	
        $page_end = ($page+1)*$pageSize-1;        
        
        if( I("departId") == ""){	//如果没有传部门id过来就默认显示第一个部门下的所属员工	        
	        $departId = empty($deptListArr_tree[0]['departId'])?0:$deptListArr_tree[0]['departId'];	//要获取信息的部门id	       
        }else{
        	$departId = I('departId');	//要获取信息的部门id        	
        }
        $deptUser = A("Api/Jhttp")->getUsersByDepart($departId,$page_start,$page_end);		//返回数据中count即为总数
        $deptUser_arr = json_decode($deptUser,true);	//员工列表
        
        $total = $deptUser_arr['count'];	//总记录数
		$pageTotal =  $totalPage = ceil($total/$pageSize); //总页数	
		
		$prePage = $page -1;	//上一页
		$nextPage = $page + 1;	//下一页
		if( $prePage <= 0 ){
			$prePage = 0;
		}
		
		if( $nextPage >= $pageTotal ){
			$nextPage = $pageTotal-1;
		}  
		
        $this->assign("departId",$departId);
        $this->assign("page_start",$page_start);
        $this->assign("nextPage",$nextPage);
        $this->assign("prePage",$prePage);
        $this->assign("page",$page);
        $this->assign("pageTotal",$pageTotal);
        $this->assign("total",$total);
        $this->assign ("pageSize", $pageSize );
        $this->assign('first_dept_user_arr',$deptUser_arr['list']);
        
        $this->assign('deptListArr_tree',$deptListArr_tree);
        $this->assign("companyId", $companyId);
        $this->assign("companyName", $companyName);
        $this->display();
    }
    
    
   /*  function page($currentPage=0,$pageSize=10,$pageStart,$pageEnd,$totalPage,$totalNum){
    	$pageStart = $currentPage*$pageSize;	//开始位置
    	$pageEnd = ($currentPage+1)*$pageSize-1;	//结束位置
    } */
    
    
    
    //新建员工
     function addStaff(){
        //获取部门列表
        $companyId=cookie("companyId");
        $companyName=cookie("companyName");
        $deptListArr_tree = $this->getDept();

        $this->assign('deptListArr_tree',$deptListArr_tree);
        $this->assign("companyId", $companyId);
        $this->display();
    }
    
    //编辑员工
    function editStaff(){    	
    	//获取员工信息
    	$userId = I('userId');
    	$userInfo = A('Api/Jhttp')->getUserinfo2($userId);
    	$userInfo_arr = json_decode($userInfo,true);
    	//获取员工头像
    	if( $userInfo_arr['list']['headLogo'] ){
    		$headLogo = M('files')->where('f_id='.$userInfo_arr['list']['headLogo'])->find();    		
    	}
    	if( $headLogo ){
    		$userInfo_arr['list']['headLogo'] = 'upfile/'.$headLogo['f_filepath'].$headLogo['f_filename'];    		
    	}
    	
    	//获取部门列表
        $companyId=cookie("companyId");
        $companyName=cookie("companyName");
        $deptListArr_tree = $this->getDept();    

    	$this->assign('userInfo',$userInfo_arr['list']);
    	$this->assign('deptListArr_tree',$deptListArr_tree);
    	$this->assign("companyId", $companyId);
    	$this->display();
    }
    
    
    //新建部门
    function  addDept(){        
        //获取部门列表
//        $companyId=cookie("companyId");
        $companyName=cookie("companyName");
        $deptListArr_tree = $this->getDept();
        
       	$this->assign('deptListArr_tree',$deptListArr_tree);
        $this->assign("companyId", $companyId);
        $this->assign("companyName", $companyName);
        $this->display();
    }
    
    
    //编辑部门
    function  editDept(){
    	//获取部门信息
    	$departInfo['departId'] = I('departId');
    	$departInfo['departName'] = I('departName');
    	$departInfo['parentId'] = I('parentId');
    	  
    	//获取部门列表
    	$companyId=cookie("companyId");
        $companyName=cookie("companyName");
        $deptListArr_tree = $this->getDept();   	
    	
    	$this->assign('deptListArr_tree',$deptListArr_tree);
    	$this->assign("companyId", $companyId);
    	$this->assign("companyName", $companyName);
    	$this->assign('departInfo',$departInfo);
    	$this->display();
    }
    
    
    //获取部门列表(公共部分，不要轻易修改)
    function getDept(){ 
    	set_theme();
    	
    	$deptListArr = array();	//树状部门关系
    	$companyId=cookie("companyId");
    	$companyName=cookie("companyName");
    	$result = A("Api/Jhttp")->getDeparts($companyId);	//公司下已有部门列表
    	$deptListArr = json_decode($result,true);    	
 	
    	$deptListArr_tree = $this->tree( $deptListArr['list'] );	//树状显示
    	
    	return $deptListArr_tree;    	
    }    

   
    //树状显示
    static public function tree(&$arr,$pid=0,$count=0){
    	foreach( $arr as $key=>$vo ){    		
    		if( $vo['parentId'] == $pid ){
    			$vo['count'] = $count;    			
    			self::$treeList[] = $vo;
    			unset($arr[$key]);
    			self::tree($arr,$vo['departId'],$count+1);
    		}  		
    	}  
    	
    	return self::$treeList;
    }
    
    //判断是否有子孙项,有子孙项的是不能删除的
    function hasChild(){
    	$departId = I('departId');
    	$deptListArr_tree = $this->getDept();
    	foreach( $deptListArr_tree as $vo){
    		if( $vo['parentId'] == $departId ){
    			$data = array('text'=>'success');
    			$this->ajaxReturn($data);exit;
    		}else{
    			$data = array('text'=>'error');    			
    		}
    	}
    	
    	$this->ajaxReturn($data);
    } 
    
    //判断是否是自己的孙子，老子不能当儿子的子类
    function isChild(){
    	$departId = I('departId');
    	$parentId = I('parentId');
    	
    	$deptListArr_tree = $this->getDept();
    	$result = $this->getChildren($deptListArr_tree, $departId);	//得到子孙
    	foreach( $result as $v ){	//子孙中是否存在现在选择的所属类
    		if( $v['departId'] == $parentId ){
    			$data['text'] = 'success';
    			$this->ajaxReturn($data);
    		}
    	}
    	$data['text'] = 'error';
    	$this->ajaxReturn($data);    	
    	
    }
    
    //得到子孙
    static public $children = array();
    function getChildren($arr,$pid){    
    	foreach( $arr as $key=>$vo ){
    		if( $vo['parentId'] == $pid ){    			
    			self::$children[] = $vo;
    			unset($arr[$key]);
    			$this->getChildren($arr,$vo['departId']);
    		}
    	}
    	
    	return self::$children;
    	
    }
    


    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}

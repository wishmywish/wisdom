<?php

namespace Home\Controller;

use Think\Controller;

class OfficeController extends CommonController {
	private $in_arr; // POST,GET参数数组
	private $userID; // userid
	private $companyId; // companyId
	private $pageSize = 2; //每页显示数
	
	// 删除公告
	public function deleteNotice() {
		$this->init ();
		$json_data = $this->delNotice ();
		//$this->showHtml ( "delNotice", $json_data );
		echo $json_data;
	}
	
	// 删除公告
	public function  setTopMessage() {
		$this->init ();
		$json_data = $this->topMessage ();
		//$this->showHtml ( "delNotice", $json_data );
		echo $json_data;
	}
	
	// 企业通讯录新增客户
	public function addClient() {
		//		$this->init ();
		$this->display ();
	}
	// 企业通讯录客户详情
	public function customerDetails() {
		$this->init ();
		$this->display ();
	}
	
	/* 运营管理入口 */
	public function index() {
		$this->init ();
		// 取得公告列表
		$json_NoticeListdata = $this->getNoticeList (1,"1","6");
		$this->showHtml ( "getNoticeList", $json_NoticeListdata );
		// 取得报告审阅人
		$json_WorkSetdata = $this->getWorkSet ();
		$this->showHtml ( "getWorkSet", $json_WorkSetdata );
		$this->display ();
	}
	
	// 新增公告入口 新增公告画面
	public function noticeAdd() {
		$this->init ();
		if (IS_AJAX) {
			// 追加日报
			echo $this->saveNotice();
		} else {
			$this->showHtml ("queryAllNoticeBoard", $this->queryAllNoticeBoard());
			$this->display ();
		}
	}
	
	// 回复公告入口 回复公告画面
	public function noticeCommentAdd() {
		$this->init ();
		//取得回复状态
		$json_data = $this->getNoticeCommentType ();
		$this->showHtml ( "getNoticeCommentType", $json_data );
		$this->display ();
	}
	
	/* 取得公告详细入口  公告详细画面*/
	public function noticeDetail() {
		$this->init ();
		$json_data = $this->viewNotice ();
		$arr_data = json_decode($json_data, true);
		$arr_data['content'] = html_entity_decode($arr_data['content']);
		$this->assign("notice", $arr_data);
		$json_file_list = json_decode($this->getAttachList(), true);
  		
  		if ($json_file_list 
  			&& $json_file_list['list']
  			&& $json_file_list['list'][0]) {
  			$displayName = $json_file_list['list'][0]['displayName'];
  			$fileUrl = ltrim($json_file_list['list'][0]['fileUrl'], "file="); 
  			$fileUrl = base64_decode($fileUrl);
  			$fileUrl = __ROOT__.'/Public/upfile/'. $fileUrl;
			$this->assign("attach_file_name", $displayName);
			$this->assign("attach_file_url", $fileUrl);
  		}

		$this->display ();
	}
	
	/* 取得用户列表  AJAX*/
	public function userList() {
		$this->init ();
		$json_data = $this->getUserList ();
		echo $json_data;
	}
	
	/* 日报审批人popup画面入口 取得部门树 */
	public function deptList() {
		$this->init ();
		$json_data = $this->getAllDeptList ();
		$this->showHtml ( "getAllDeptList", $json_data );
		$this->display ();
	}
	
	/* 新增日报  日报保存AJAX*/
	public function saveReport() {
		$this->init ();
		// 追加审阅人
		if ($this->in_arr ["recorder"] != "") {
			$this->setWorkSet ();
		}
		// 追加日报
		$json_data = $this->operateWorkReport ();
		echo $json_data;
	}


	// 报告审阅入口文件
	public function reportReview() {
		$this->init ();
		//in_arr ["searchType"];
		//private function queryWorkReport($startDate,$endDate,$type) {
		//echo ($this->in_arr ["selectedDate"]."-01");
		if ($this->in_arr ["selectedDate"] == null or $this->in_arr ["selectedDate"]=="")
		{
			$selectedDate = date("Y-m");
		}else {
			$selectedDate = $this->in_arr ["selectedDate"];
		}
		/*
		if ($this->in_arr ["searchType"]=="1") {
			//$this->assign ( 'selectedDate',date ( "Y-m", strtotime ( "-1 months",$this->in_arr ["selectedDate"]."-01") ));
			$useDate = $this->in_arr ["selectedDate"]."-01";
			$selectedDate = date("Y-m",strtotime("-1months",strtotime($useDate)));
		}else if($this->in_arr ["searchType"]=="2"){
			$useDate = $this->in_arr ["selectedDate"]."-01";
			$selectedDate = date("Y-m",strtotime("+1months",strtotime($useDate)));
			//$this->assign ( 'selectedDate',date("Y-m-d", strtotime("+1 months", strtotime("2010-10-06"))));
		}else if($this->in_arr ["searchType"]=="4"){
			$selectedDate =  $this->in_arr ["selectedDate"];
		}else{
			$selectedDate = date("Y-m");
		}
	*/
		$this->assign ( 'selectedDate',$selectedDate);
		//$type:日报:1;周报:2;月报:3  通过API取得日报
		$json_data=$this->queryWorkReport($selectedDate."-01",date("Y-m-d",strtotime("+1months",strtotime($selectedDate))),"1");
		//echo $json_data;
		//将JSON转化为数组
		$json_Array = json_decode ( $this->dejson($json_data ), true );
		//$json_Array = json_decode ( $json_data, true );
		//循环日报
		$count  =  count($json_Array["list"]);
		$reportDate="";
		//当月1号是星期几
		$weekDay = date('w',strtotime($selectedDate."-01"));
		$d = strtotime($selectedDate."-01");
		$days;
		for  ($i=1;  $i<=date('t',$d);  $i++)  {
				$days_value = array("day" => $i,"value" => "","id"=>"");
				$days[$i+$weekDay] = $days_value;
		}
		
		for  ($i=0;  $i<$count;  $i++)  {
			//echo $json_Array["list"][$i]["title"]."</br>";
			$reportDate =str_replace(" 工作日报","",$json_Array["list"][$i]["title"]);
			$reportDate =str_replace("日报：","",$reportDate);
			$reportDate =str_replace(" ","",$reportDate);
			//echo $reportDate."</br>";
				
			if ($this->checkDateIsValid($reportDate)){
				//取得日报的日期（只取日）
				$reportDay = date("d",strtotime($reportDate));
				//echo str_replace(" ", '', 	$json_Array["list"][$i]["content"])."</br>";
				//$json_Array["list"][$i]["content"]=substr($json_Array["list"][$i]["content"]['content'],0,50);
				$days_value = array("day" => intval($reportDay, 10),"value" => mb_substr($json_Array["list"][$i]["content"],0,45, 'utf-8'),"id"=>$json_Array["list"][$i]["reportId"],"value_t" =>str_replace(" ", '', 	$json_Array["list"][$i]["content"]));
				//array_push($this->days,$days_value);
				$days[$reportDay+$weekDay] = $days_value;
			}
		}
		
		if ($this->in_arr ["li_type"]=="li_ri") {
			$startDate = $this->in_arr ["ri_date"];
			$endDate = $this->in_arr ["ri_date"];
		}else if($this->in_arr ["li_type"]=="li_zhou"){
			$startDate = $this->in_arr ["zhou_dateF"];
			$endDate = $this->in_arr ["zhou_dateT"];
		}else if($this->in_arr ["li_type"]=="li_yue"){
			$startDate = $this->in_arr ["yue_date"]."-01";
			$endDate = $this->in_arr ["yue_date"]."-" . date ( "t", strtotime ( $startDate) );
		}else{
			$startDate = $this->in_arr ["startdate"];
			$endDate = $this->in_arr ["endDate"];
		}
		
		//处理审阅日报数据
		//$json_data_WorkReportList=$this->getCheckWorkReportList(date('Y-m-d'),date('Y-m-d'));
		if ($startDate == null){
			$startDate = $selectedDate = date("Y-m-d");
			$endDate = $selectedDate = date("Y-m-d");
		}
		
		//测试数据 开始
		$pageSize = 2;  //每页显示条数。
		//$startDate ="1999-01-01";
		//$endDate ="2999-01-01";
		//测试数据 结束
		
		$this->assign ( 'pageSize',$pageSize);
		$this->assign ( 'total',"0");
		$this->assign ( 'totalPage',"0");
		if ($this->in_arr ["currentPage"]=="" or $this->in_arr ["currentPage"] == null){
			$this->in_arr ["currentPage"] = 1;
		}
		$this->assign ( "currentPage",$this->in_arr ["currentPage"] );
	
		$json_data_WorkReportList=$this->getCheckWorkReportList($startDate,$endDate,$pageSize*$this->in_arr ["currentPage"]-1,$this->in_arr ["currentPage"]*$pageSize);
		//$json_data_WorkReportList=$this->queryWorkReport($startDate,$endDate);          // 临时用
		//$this->showHtml ( "WorkReportList", $json_data_WorkReportList );
			
		$json_Array = $this->checkApiResult ( "getCheckWorkReportList", $json_data_WorkReportList );
		$keys = array_keys ( $json_Array );
		
		//审阅报告：1；我的报告：0
		//if ($this->in_arr ["page"]==""   or $this->in_arr ["showDiv"]==null){
		//	$this->assign ( 'showDiv', "0");
		//}else{

		//}
		
		for($i = 0; $i < count ( $keys ); $i ++) {
			// echo $actionName.$keys[$i].' value:'.$json_Array[$keys[$i]].'<br>';
			if ($keys [$i] == "count"){
				$this->assign ( 'total',$json_Array["count"]);
				$this->assign ( 'totalPage',ceil($json_Array["count"]/$pageSize));
			}
			if ($keys [$i] == "list"){
				while(list($key,$value)=each($json_Array["list"]))
				{
					//echo "$key=>".$json_Array["list"][$key]['title'].'<br>';
					if ($json_Array["list"][$key]['type']==null){$json_Array["list"][$key]['type']="　";}
					if ($json_Array["list"][$key]['state']==null){$json_Array["list"][$key]['state']="　";}
					if ($json_Array["list"][$key]['viewTime']==null){$json_Array["list"][$key]['viewTime']="　";}
					if ($json_Array["list"][$key]['createPerple']==null){$json_Array["list"][$key]['createPerple']="　";}
					if ($json_Array["list"][$key]['title']==null){$json_Array["list"][$key]['title']="　";}
					if ($json_Array["list"][$key]['content']==null){$json_Array["list"][$key]['content']="　";}
					if($json_Array["list"][$key]['type']=='1'){
						$json_Array["list"][$key]['type'] = "日报";
						$json_Array["list"][$key]['title'] = mb_substr($json_Array["list"][$key]['title'],3,10, 'utf-8');
					}else if($json_Array["list"][$key]['type']=='2'){
						$json_Array["list"][$key]['type'] = "周报";
						$json_Array["list"][$key]['title'] = mb_substr($json_Array["list"][$key]['title'],3,10, 'utf-8');
					}else{
						$json_Array["list"][$key]['type'] = "月报";
						$json_Array["list"][$key]['title'] = mb_substr($json_Array["list"][$key]['title'],3,7, 'utf-8');
					}
					if($json_Array["list"][$key]['state']=='3'){
						$json_Array["list"][$key]['state'] = "已审阅";
					}else{
						$json_Array["list"][$key]['state'] = "未审阅";
					}
					$json_Array["list"][$key]['title']=mb_substr($json_Array["list"][$key]['title'],0,30, 'utf-8');//substr($json_Array["list"][$key]['title'],0,30);
					$json_Array["list"][$key]['createPerple']=mb_substr($json_Array["list"][$key]['createPerple'],0,10, 'utf-8');//substr($json_Array["list"][$key]['createPerple'],0,30);
					$json_Array["list"][$key]['content']=mb_substr($json_Array["list"][$key]['content'],0,15, 'utf-8');
				}
			}
			$this->assign ( 'getCheckWorkReportList_' . $keys [$i], $json_Array [$keys [$i]] );
		}
		$this->assign ( 'days', $days);
		$this->setReportData ();
		$this->display ();
	}
	
	/* 考勤一览画面入口  考勤列表画面*/
	public function setReportData() {
		 //审阅报告：1；我的报告：0
	    if ($this->in_arr ["showDiv"]=="0"   or $this->in_arr ["showDiv"]==null){
	    	$this->assign ( 'showDiv', "0");
	    }else{
	    	$this->assign ( 'showDiv', "1");
	    }
	   //审阅日报 日 周 月 区间 设置
	    if ($this->in_arr ["li_type"]== null){
	    	$this->assign ( 'li_type', "li_ri");
	    }else 
	    {
	    	$this->assign ( 'li_type', $this->in_arr ["li_type"]);
	    }
	    //审阅日报 日设置
        if ($this->in_arr ["ri_date"] == null){
        	//$this->assign ( 'ri_date', "2015-09-15");
        }else {
        	$this->assign ( 'ri_date',$this->in_arr ["ri_date"]);
        }
        //审阅日报 月设置
        if ($this->in_arr ["yue_date"] == null){
        	//$this->assign ( 'yue_date', "2015-09");
        }else {
        	$this->assign ( 'yue_date',$this->in_arr ["yue_date"]);
        }
        //审阅日报 周设置
        if ($this->in_arr ["zhou_dateF"] == null){
        	//$this->assign ( 'zhou_dateF', "2015-09-15");
        	//$this->assign ( 'zhou_dateT', "2015-09-15");
        }else {
        	$this->assign ( 'zhou_dateF',$this->in_arr ["zhou_dateF"]);
        	$this->assign ( 'zhou_dateT',$this->in_arr ["zhou_dateT"]);
        }
        //审阅日报 区间设置
        if ($this->in_arr ["startdate"] == null){
        	//$this->assign ( 'startdate', "2015-09-15");
        	//$this->assign ( 'enddate', "2015-09-15");
        }else {
        	$this->assign ( 'startdate',$this->in_arr ["startdate"]);
        	$this->assign ( 'enddate',$this->in_arr ["enddate"]);
        }
	}
	
	/* 考勤一览画面入口  考勤列表画面*/
	public function checking() {
		$this->init ();
		$json_data = $this->getWorkSignList(1);
		$this->showHtml ("getWorkSignList", $json_data);
		$this->assign("li_type", $this->in_arr["li_type"]);
		$this->assign("ri_date", $this->in_arr["ri_date"]);
		$this->assign("zhou_dateF", $this->in_arr["zhou_dateF"]);
		$this->assign("zhou_dateT", $this->in_arr["zhou_dateT"]);
		$this->assign("yue_date", $this->in_arr["yue_date"]);
		$this->assign("startdate", $this->in_arr["startdate"]);
		$this->assign("enddate", $this->in_arr["enddate"]);
		$this->assign("deptNames", $this->in_arr["deptNames"]);
		$this->assign("deptIds", $this->in_arr["deptIds"]);
		$this->assign("userNames", $this->in_arr["userNames"]);
		$this->assign("userIds", $this->in_arr["userIds"]);

		$this->display ();
	}
	
	// 公告入口文件
	public function notice() {
		$this->init ();
		// 追加日报
		$json_data = $this->getNoticeList(1);
		$this->showHtml ( "getNoticeList", $json_data );
		$json_data = $this->queryAllNoticeBoard();
		$this->showHtml ( "queryAllNoticeBoard", $json_data );
		$this->display ();
	}
	// 工作审批入口文件
	public function approval() {
		$this->init ();
		$this->display ();
	}
	// 通讯录入口文件
	public function contact() {
		$this->init ();
		$dept_list = $this->formatDeptList(true);
		$user_list = $this->getUserList(1);
		$this->assign ("dept_list", $dept_list);
		$this->assign ("user_list", $user_list);
		$this->display ();
	}

	public function showUserDetail($uid) {
		$userDetail = $this->viewUserDetail($uid);
		$this->assign("userDetail", json_decode($userDetail, true));
		$this->display ();
	}

	/* 取得全部消息 */
	public function getInfoAll() {
		// $json_data = $this->operateWorkReport ();
		// $this->showHtml("operateWorkReport",$json_data);
		// $this->display();
	}
	
	/* 取得待处理消息 */
	public function getInfoBefore() {
		// $json_data = $this->operateWorkReport ();
		// $this->showHtml("operateWorkReport",$json_data);
		// $this->display();
	}
	
	/* 取得处理后消息 */
	public function getInfoAfter() {
		// $json_data = $this->operateWorkReport ();
		// $this->showHtml("operateWorkReport",$json_data);
		// $this->display();
	}
	
	/* 初期化 */
	private function init() {
		set_theme ();
		$re = A ( 'Api' )->getBigC ();
		// pt($re);
		// exit;
		foreach ( $re as $key => $val ) {
			if ($val ['f_sys_column_cid'] == 'Office') {
				$syscolumn_id = $val ['f_syscolumn_id'];
				$sre = A ( 'Api' )->getBigC ( $syscolumn_id );
			}
		}
		
		$this->assign ( 'bigclass', $re );
		$this->assign ( 'smallclass', $sre );
		// $this->display();
		
		$this->in_arr = array_merge ( $_GET, $_POST );
		$this->userID = cookie ( "userId" );
		$this->companyId = cookie ( "companyId" );
		//取得用户基本信息
		$json_data = $this->viewUserDetail();
		$this->showHtml ( "viewUserDetail", $json_data );
	}
	
	/* 为HTML返回数据 */
	private function showHtml($actionName, $json_data) {
		$json_Array = $this->checkApiResult ( $actionName, $json_data );
		$keys = array_keys ( $json_Array );
		for($i = 0; $i < count ( $keys ); $i ++) {
			// echo $actionName.$keys[$i].' value:'.$json_Array[$keys[$i]].'<br>';
			$this->assign ( $actionName . '_' . $keys [$i], $json_Array [$keys [$i]] );
		}
	}
	
	/*
	 * 调用API saveAttach 10.1 新增附件记录接口
	 * tblname 附件所属业务名称 公告附件:bbsMessage; 工作报告附件:workReport;
	 * linkid 附件所属业务ID    公告ID或工作报告ID
	 * oldName 附件名称
	 * type 附件类型
	 * size 附件大小
	 * returnUrl 附件存储路径加密文本
	 */
	private function saveAttach($tblname,$linkid,$oldName,$type,$size,$returnUrl) {
		$url = C ( "OperatehttpUrl" ) . $url;
		$data = array (
				"command" => "saveAttach",
				"tblname" => $tblname,
				"linkid" => $linkid,
				"oldName" => $oldName,
				"type" => $type,
				"size" => $size,
				"returnUrl" => "file=".base64_encode($returnUrl)
		);
		$json_data = postData ( $url, $data );
		return $json_data;
	}
	
	/* 调用delNotice 1.4删除公告接口 */
	private function delNotice() {
		$url = C ( "OperatehttpUrl" ) . $url;
		$data = array (
				"command" => "delNotice",
				"userId" =>$this->userID,
				"messageId" =>$this->in_arr ["messageId"] 
		);
		
		$json_data = postData ( $url, $data );
		return $json_data;
	}
	
	/* 调用topMessage 1.8公告置顶操作接口 */
	private function topMessage() {
		$url = C ( "OperatehttpUrl" ) . $url;
		$data = array (
				"command" => "topMessage",
				"userId" =>$this->userID,
				"isTop" =>$this->in_arr ["isTop"],
				"messageId" =>$this->in_arr ["messageId"]
		);
		$json_data = postData ( $url, $data );
		return $json_data;
	}
	
	/* 调用API getAllDeptList 返回部门列表 */
	private function getAllDeptList() {
		$url = C ( "OperatehttpUrl" ) . $url;
		$data = array (
				"command" => "getAllDeptList",
				"companyId" => $this->companyId
		);
		$json_data = postData ( $url, $data );
		return $json_data;
	}
	
	/* 调用API getUserList 取得登陆用户所属公司下的员工列表 */
	public function getUserList($page = 0) {
		$this->init ();
		if ($page > 0) {
			$queryStart = (($page - 1) * $this->pageSize) + 1;
			$queryEnd = $page * $this->pageSize;
		} else {
			$queryStart = 1;
			$queryEnd = 100000;
		}

		$url = C ( "OperatehttpUrl" ) . $url;
		$data = array (
				"command" => "getUserList",
				"userId" => $this->userID,
				"queryStart" => $queryStart,
				"queryEnd" => $queryEnd,
				"deptId" => $this->in_arr ["deptId"],
				"userName" => $this->in_arr["name"],
				"mobile" => $this->in_arr["mobile"],
		);
		$json_data = postData ( $url, $data );

		if ($page > 0) {
			$obj_data = json_decode($this->dejson($json_data ));
			$pages = $this->getPages(intval($obj_data->count));
			$obj_data->page = $page;
			$obj_data->total = $pages['total'];
			$obj_data->pageSize = $pages['pageSize'];
			$obj_data->totalPage = $pages['totalPage'];
			$json_data = json_encode($obj_data);
		}

		if (IS_AJAX) {
			echo $json_data;
		} else {
			$arr_data = json_decode($json_data, true);
			return $arr_data;
		}
	}
	
	/* 调用API getWorkSet 取得审阅人 */
	private function getWorkSet() {
		$url = C ( "OperatehttpUrl" ) . $url;
		$data = array (
				"command" => "getWorkSet",
				"userId" => $this->userID 
		);
		$json_data = postData ( $url, $data );
		return $json_data;
	}
	
	/* 调用API saveWorkSet 设置审阅人 */
	private function setWorkSet() {
		$url = C ( "OperatehttpUrl" ) . $url;
		$data = array (
				"command" => "saveWorkSet",
				"userId" => $this->userID,
				"recorder" => $this->in_arr ["recorder"] 
		);
		$json_data = postData ( $url, $data );
		return $json_data;
	}
	
	/* 调用API getNoticeList 取得公告列表 */
	private function getNoticeList($page=1, $queryStart_Para="",$queryEnd_Para="") {
		$url = C ( "OperatehttpUrl" ) . $url;
		
		if ($this->in_arr["page"]) {
			$page = intval($this->in_arr["page"]);
		} else if (!$page) {
			$page = 1;
		}

		$queryStart = "";
		$queryEnd = "";
		if($queryStart_Para == "") {
			$queryStart = (($page - 1) * $this->pageSize) + 1;
			$queryEnd = $page * $this->pageSize;
		} else{
			$queryStart = $queryStart_Para;
			$queryEnd = $queryEnd_Para;
		}
		$data = array (
				"command" => "getNoticeList",
				"userId" => $this->userID,
				"companyId" => $this->companyId,
				"queryStart" => $queryStart,
				"queryEnd" => $queryEnd,
				"subject" => $this->in_arr ["subject"],
				"boardId" => $this->in_arr ["boardId"]
		);
		$json_data = postData ( $url, $data );
		$obj_data = json_decode($this->dejson($json_data ));
		$pages = $this->getPages(intval($obj_data->count));
		$obj_data->page = $page;
		$obj_data->total = $pages['total'];
		$obj_data->pageSize = $pages['pageSize'];
		$obj_data->totalPage = $pages['totalPage'];
		return json_encode($obj_data);
	}

	/* 调用API getNoticeList 取得公告列表 */
	public function searchNoteList() {
		$this->init();
		echo $this->getNoticeList();
	}
	
	/* 调用API viewNotice 取得公告明细 */
	private function viewNotice() {
		$url = C ( "OperatehttpUrl" ) . $url;
		$data = array (
				"command" => "viewNotice",
				"userId" => $this->userID,
				"companyId" => $this->companyId,
				"messageId" => $this->in_arr ["messageId"] 
		);
		$json_data = postData ( $url, $data );
		return $json_data;
	}
	
	
	/* 调用API getCheckWorkReportList  审阅工作报告列表（不含自己） */
	private function getCheckWorkReportList($startDate,$endDate,$queryStart=0,$queryEnd=999) {
		/*
		command	请求命令
		userId			用户ID
		queryStart	查询范围下限
		queryEnd	查询范围上限
		title				报告标题
		startDate		报告开始日期
		endDate		报告结束日期
		type				报告类型          日报:1;周报:2;月报:3
		state			报告状态          未审阅:2;已审阅:3
		*/
		
		$url = C ( "OperatehttpUrl" ) . $url;
		$data = array (
				"command" => "getCheckWorkReportList",
				"userId" => $this->userID,
				"queryStart" => $queryStart,
				"queryEnd" => $queryEnd,
				"startDate" =>$startDate,
				"endDate" => $endDate
		);
		$json_data = postData ( $url, $data );
		return $json_data;
	}
	
	/* 调用API queryGPSList 3.1获取拜访签到列表 */
	private function queryGPSList() {
		$url = C ( "OperatehttpUrl" ) . $url;
		$data = array (
				"command" => "queryGPSList",
				"userId" => $this->userID,
				"companyId" => $this->companyId,
				"messageId" => $this->in_arr ["messageId"] 
		);
		$json_data = postData ( $url, $data );
		return $json_data;
	}
	// 2.8工作报告查询接口  queryWorkReport
	private function queryWorkReport($startDate,$endDate,$type="") {
		/*
			command	String	Y	V64	请求命令
			userId	String	Y	V16	用户ID
			queryStart	String	Y	V16	查询范围下限
			queryEnd	String	Y	V16	查询范围上限
			title	String	N	V2	报告标题
			startDate	String	N	V16	报告开始日期
			endDate	String	N	V16	报告结束日期
			type	String	N	V2	报告类型
			state	String	N	V2	报告状态
			*/
		$url = C ( "OperatehttpUrl" ) . $url;
		$data = array (
				"command" => "queryWorkReport",
				"userId" => $this->userID,
				"queryStart"	=> "0",
				"queryEnd"	=> "9999",
				"startDate" =>$startDate,
				"endDate" =>$endDate,
				"type" =>$type
		);
		$json_data = postData ( $url, $data );
		return $json_data;
	}
	/*取得日报ID*/
	private function getWorkReportId() {
		$url = C ( "OperatehttpUrl" ) . $url;
		$data = array (
				"command" => "getWorkReportId" 
		);
		$json_data = postData ( $url, $data );
		return $json_data;
	}
	/*getNoticeCommentType 1.9查询公告反馈类型列表接口*/
	private function getNoticeCommentType() {
		$url = C ( "OperatehttpUrl" ) . $url;
		$data = array (
				"command" => "getNoticeCommentType",
				"companyId" => $this->companyId
				
		);
		$json_data = postData ( $url, $data );
		return $json_data;
	}
	
	
	/*viewUserDetail 4.3 查看用户详情接口*/
	private function viewUserDetail($uid = 0) {
		$url = C ( "OperatehttpUrl" ) . $url;
		$data = array (
				"command" => "viewUserDetail",
				"userId" => (empty($uid) ? $this->userID : $uid)
		);
		$json_data = postData ( $url, $data );
		return $json_data;
	}
	
	/*queryAllNoticeBoard 9.2 查询公告栏目接口*/
	private function queryAllNoticeBoard() {
		$url = C ( "OperatehttpUrl" ) . $url;
		$data = array (
				"command" => "queryAllNoticeBoard",
				"userId" => $this->userID,
	
		);
		$json_data = postData ( $url, $data );
		return $json_data;
	}
	
	/*取得公告ID*/
	private function getNoticeId() {
		$url = C ( "OperatehttpUrl" ) . $url;
		$data = array (
				"command" => "getNoticeId"
		);
		$json_data = postData ( $url, $data );
		return $json_data;
	}
	
	/* 3.4查询上下班签到记录 getWorkSignList */
	private function getWorkSignList($page=1) {
		$url = C ( "OperatehttpUrl" ) . $url;
		if ($this->in_arr["page"]) {
			$page = intval($this->in_arr["page"]);
		} else if (!$page) {
			$page = 1;
		}

		$queryStart = (($page - 1) * $this->pageSize) + 1;
		$queryEnd = $page * $this->pageSize;
		$dateType = 1;
		switch ($this->in_arr["li_type"]) {
			case 'li_zhou':
				$dateType = 2;
				$startDate = $this->in_arr ["zhou_dateF"];
				$endDate = $this->in_arr ["zhou_dateT"];
				break;
			case 'li_yue':
				$dateType = 3;
				$startDate = $this->in_arr ["yue_date"];
				$endDate = "";
				break;
			case 'li_qujian':
				$dateType = 4;
				$startDate = $this->in_arr ["startdate"];
				$endDate = $this->in_arr ["enddate"];
				break;
			default:
				$dateType = 1;
				$startDate = $this->in_arr ["ri_date"];
				$endDate = $this->in_arr ["ri_date"];
				break;
		}
		
		$data = array (
				"command" => "getWorkSignList",
				"userId" => $this->userID,
				"queryStart" => $queryStart,
				"queryEnd" => $queryEnd,
				"source" => "1",
				"dateType" => $dateType,
				"startDate" => $startDate,
				"endDate" => $endDate,
				"userIds" => $this->in_arr ["userIds"],
				"deptId" => $this->in_arr ["deptId"] 
		);

		$json_data = postData ( $url, $data );
		$obj_data = json_decode($this->dejson($json_data));
		$pages = $this->getPages(intval($obj_data->count));
		$obj_data->page = $page;
		$obj_data->total = $pages['total'];
		$obj_data->pageSize = $pages['pageSize'];
		$obj_data->totalPage = $pages['totalPage'];
		return json_encode($obj_data);
	}
	

	/* 调用API saveNotice 1.1新增公告接口 */
	private function saveNotice() {
	
		$json_data = $this->getNoticeId ();
		$json_Array = json_decode ( $this->dejson($json_data ), true );
		$noticeId = $json_Array ["noticeId"]; 
		$subject  = $this->in_arr ["subject"];
		$content = htmlentities($this->in_arr ["content"]);
		$path = 'http://' . I('server.HTTP_HOST') . U('Home/Office/noticeDetail', array('messageId' => $noticeId));
		$boardId = $this->in_arr ["boardId"];
		$userIds = $this->in_arr ["userIds"];
		$deptIds = $this->in_arr ["deptIds"];
		$isTop = $this->in_arr ["isTop"];
	
		$url = C ( "OperatehttpUrl" ) . $url;
		$data = array (
				"command" => "saveNotice",
				"noticeId" => $noticeId,
				"userId" => $this->userID,
				"subject" => $subject,
				"content" => $content,
				"path" => $path,
				"boardId" => $boardId,
				"userIds" => $userIds,
				"deptIds" => $deptIds,
				"isTop" => $isTop
		);
		$json_data = postData ( $url, $data );
		
		//notice 附件追加
		if ($upfile['oldName']!="" && $upfile['oldName']!=null){
			$json_data_saveAttach = $this->saveAttach("bbsMessage",$noticeId,$upfile['oldName'],$upfile['type'],$upfile['size'],$upfile['returnUrl']);
			$json_data_updateNoticeAttachFlag = $this->updateNoticeAttachFlag(1,$noticeId);
		}
		return $json_data;
	}
	
	/* 调用API updateNoticeAttachFlag 1.2修改公告附件标识接口*/
	private function updateNoticeAttachFlag($flag,$messageId) {
		$url = C ( "OperatehttpUrl" ) . $url;
		$data = array (
				"command" => "updateNoticeAttachFlag",
				"flag" => $flag,
				"messageId" => $messageId,
		);
		$json_data = postData ( $url, $data );
	
		return $json_data;
	}
	
	
	/* 调用API operateWorkReport  追加修改日报*/
	private function operateWorkReport() {
		$json_data = $this->getWorkReportId ();
		$json_Array = json_decode ( $this->dejson($json_data ), true );
		$command = "operateWorkReport"; // 请求命令
		$userId = $this->userID; // 用户ID
		$source = "1"; // 来源 web:1;mobile:2
		$reportId = $json_Array ["reportId"]; // 工作报告ID
		$reportType = $this->in_arr ["reportType"]; // 工作报告类型 日报:1;周报:2;月报:3
		$startDate = $this->in_arr ["startDate"]; // 工作报告开始时间 可以为空
		$endDate = $this->in_arr ["endDate"]; // 工作报告结束时间 可以为空
		$subject = ""; // 工作报告标题 可以为空 标题格式(日报：年-月-日 工作日报);周报格式(周报：年-月-日--年-月-日 工作周报);月报格式(月报：年-月 工作月报).
		$oType = "1"; // 操作类型 新增:1;编辑:2.
		$voiceCount = "0"; // 工作报告语音条数 可以为空 最多5条  web端无法使用该接口上传附件
		$reportState = "2"; // 工作报告提交审核或保存1,保存,2 提交审核
		$reportContent = $this->in_arr ["reportContent"]; // 工作报告内容
		$voices = $this->in_arr ["voices"];
		$url = C ( "OperatehttpUrl" ) . $url;
		if ($reportType == "1") {
			$startDate = $this->in_arr ["date"];
			$endDate = $this->in_arr ["date"];
			$subject = "日报：" . $startDate . "  工作日报";
		} elseif ($reportType == "2") {
			$subject = "周报：" . $startDate . "--" . $endDate . "  工作周报";
		} elseif ($reportType == "3") {
			$subject = "月报：" . date ( "Y-m", strtotime ( $this->in_arr ["date"] ) ) . "  工作月报";
			$startDate = date ( "Y-m", strtotime ( $this->in_arr ["date"] ) ) . "-01";
			$endDate = date ( "Y-m", strtotime ( $this->in_arr ["date"] ) ) . "-" . date ( "t", strtotime ( $this->in_arr ["date"] ) );
		}
		
		$json_data = $this->getWorkReportId ();
		$json_Array = json_decode ( $this->dejson($json_data ), true );
		
		$data = array (
				"command" => $command,
				"userId" => $userId,
				"source" => $source,
				"reportId" => $reportId,
				"reportType" => $reportType,
				"startDate" => $startDate,
				"endDate" => $endDate,
				"subject" => $subject,
				"oType" => $oType,
				"voiceCount" => $voiceCount,
				"reportState" => $reportState,
				"reportContent" => $reportContent,
		);
		
		//追加附件
		if ($upfile['oldName']!="" && $upfile['oldName']!=null){
				$json_data_saveAttach = $this->saveAttach("workReport",$reportId,$upfile['oldName'],$upfile['type'],$upfile['size'],$upfile['returnUrl']);
		}

		$json_data = postData ( $url, $data );
		return $json_data;
	}
	
	/* 判断API返回值 */
	private function checkApiResult($apiName, $apiReturnValue) {
		$json_Array = json_decode ( $this->dejson($apiReturnValue ), true );
		$ErrorValue = "";
		if ($json_Array ['conf_auth'] == "F") {
			$ErrorValue = "COMMAND不存在。";
		}
		if ($json_Array ['error_code'] != "success") {
			$ErrorValue = $json_Array ['error_text'];
		}
		$this->assign ( $apiName . '_ErrorMsg', $ErrorValue );
		return $json_Array;
	}
	
	/* 初始化发送人选择画面 */
	public function selectUsers() {
		$this->init();
		$dept_list = $this->formatDeptList(true);
		$this->assign ( "dept_list", $dept_list);
		$this->assign ( "userNames", I ( "get.userNames" ) );
		$this->assign ( "userIds", I ( "get.userIds" ) );
		$this->display ();
	}

	/* 初始化发送人选择画面 */
	public function selectUser() {
		$this->init();
		$dept_list = $this->formatDeptList(true);
		$userDetail = $this->viewUserDetail(I ( "get.userId" ));
		$info = json_decode($userDetail, true);
		$this->assign ( "dept_list", $dept_list);
		$this->assign ( "userId", I ( "get.userId" ));
		$this->assign ( "userName", $info['name']);
		$this->assign ( "photoId", $info['photoId']);
		$this->assign ( "no", I ( "get.no" ) );
		$this->assign ( "objId", I ( "get.objId" ) );
		$this->display ();
	}

	/* 初始化发送人选择画面 */
	public function selectDepts() {
		$this->init();
		$dept_list = $this->formatDeptList(false);
		$this->assign ( "dept_list", $dept_list);
		$this->assign ( "deptNames", I ( "get.deptNames" ) );
		$this->assign ( "deptIds", I ( "get.deptIds" ) );
		$this->display ();
	}

	private function formatDeptList($hrefFlag = false) {
		$json_DeptListData = $this->getAllDeptList ();
		$json_Array = json_decode ( $this->dejson($json_DeptListData ) , true );
		$dept_list = array();
		foreach ($json_Array['list'] as $k => $v) {
			if ($v['deptLevel'] == '1') {
				$dept_list[0]['deptId'] = $v['deptId'];
				$dept_list[0]['text'] = $v['deptName'];
				if ($hrefFlag) {
					$dept_list[0]['href'] = 'javascript:getUserListByDeptId(' . $v['deptId'] . ')';
				}
				$dept_list[0]['children'] = array();
			} else {
				$keys = $this->findDeptKey($dept_list, $v['deptParent'], intval($v['deptLevel']));
				$arr = array(
					'deptId' => $v['deptId'],
					'text' => $v['deptName'], 
					'children' => array());
				if ($hrefFlag) {
					$arr['href'] = 'javascript:getUserListByDeptId(' . $v['deptId'] . ')';
				}
				if (array_key_exists('k4', $keys)) {
					$dept_list[$keys['k1']]['children'][$keys['k2']]['children'][$keys['k3']]['children'][$keys['k4']]['children'][] = $arr;
				} else if (array_key_exists('k3', $keys)) {
					$dept_list[$keys['k1']]['children'][$keys['k2']]['children'][$keys['k3']]['children'][] = $arr;
				} else if (array_key_exists('k2', $keys)) {
					$dept_list[$keys['k1']]['children'][$keys['k2']]['children'][] = $arr;
				} else if (array_key_exists('k1', $keys)) {
					$dept_list[$keys['k1']]['children'][] = $arr;
				}
			}
		}

		return json_encode($dept_list);
	}
	
	/**
	 * 校验日期格式是否正确
	 *
	 * @param string $date 日期
	 * @param string $formats 需要检验的格式数组
	 * @return boolean
	 */
	function checkDateIsValid($date, $formats = array("Y-m-d", "Y/m/d")) {
		$unixTime = strtotime($date);
		if (!$unixTime) { //strtotime转换不对，日期格式显然不对。
			return false;
		}
		//校验日期的有效性，只要满足其中一个格式就OK
		foreach ($formats as $format) {
			if (date($format, $unixTime) == $date) {
				return true;
			}
		}
	
		return false;
	}
	
	private function findDeptKey($dept_list, $dept_id, $level=2) {
		if (!$level) {
			$level = 4;
		}
		$keys = array();
		foreach ($dept_list as $k1 => $v1) {
			$keys['k1'] = $k1;
			if ($v1['deptId'] == $dept_id) {
				return $keys;
			}
			if ($level > 1) {
				foreach ($v1['children'] as $k2 => $v2) {
					$keys['k2'] = $k2;
					if ($v2['deptId'] == $dept_id) {
						return $keys;
					} else if ($level > 2) {
						foreach ($v2['children'] as $k3 => $v3) {
							$keys['k3'] = $k3;
							if ($v3['deptId'] == $dept_id) {
								return $keys;
							} else if ($level > 3) {
								foreach ($v3['children'] as $k4 => $v4) {
									$keys['k4'] = $k4;
									if ($v4['deptId'] == $dept_id) {
										return $keys;
									}
								}
							}
						}
					}
				}
			}
		}
		return $keys;
	}

	private function getPages($total=0) {
        $totalPage = ceil($total / $this->pageSize);	//总页数
        return array(
        		'total' => $total,
        		'pageSize' => $this->pageSize,
        		'totalPage' => $totalPage);
	}
	
	private function dejson($str){
		//$str = str_replace("\\", '\\\\', $str);
		//$str = str_replace("\r\n", "", $str);
		//$str = str_replace("\n", "", $str);
	    $str = str_replace("\n", ' ', 	$str);
		return $str;
	}

	/* 10.2 获取附件记录列表接口 getAttachList */
	private function getAttachList($tblname = 'bbsMessage') {
		$url = C ( "OperatehttpUrl" ) . $url;
		$data = array (
				"command" => "getAttachList",
				"tblname" => $tblname,
				"linkid" => $this->in_arr ["messageId"]
		);
		$json_data = postData ( $url, $data );
		return $json_data;
	}
}